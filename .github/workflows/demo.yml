name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # Add caching to reduce installation time
      - name: Cache dependencies
        uses: actions/cache@v3
        # specify the path where the cache would be stored and can be reused
        with:
          path: ~/.npm
          # The key is used to retrieve the cache in the future and can be used to discard it or change it
          # Use hasFiles function to specify where to get the dependensices
          # package-lock.json specifies all the dependencies of the project and where they can be got
          key: deps-node-modules-${{ hasFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    # outputs can be used to define outputs of our choice
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3
      # Add caching to reduce installation time
      - name: Cache dependencies
        uses: actions/cache@v3
        # specify the path where the cache would be stored and can be reused
        with:
          path: ~/.npm
          # The key is used to retrieve the cache in the future and can be used to discard it or change it
          # Use hasFiles function to specify where to get the dependensices
          # package-lock.json specifies all the dependencies of the project and where they can be got
          key: deps-node-modules-${{ hasFiles('**/package-lock.json') }}
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename
        # Set the id name to use to access the output
        id: publish
        # This command would help get the file 'index.d590f20c.js' in the dist/asset folder
        # This would write some data into an output file managed by GitHub
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';'
        # old syntax, would not be supported by GitHub in the future
        # run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}' ';'
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        # with key is used to add some additional configuration
        with:
          name: dist-files
          # use '|' to add multiple paths
          path: dist
          # path: |
          #   dist
          #   package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Get build artifacts
        uses: actions/download-artifact@v4
        # specify the artifact identifier
        with:
          name: dist-files
      # view contents of the downloaded files
      - name: Output contents
        run: ls
        # get contents from the output file
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
